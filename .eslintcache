[{"C:\\Users\\Vision\\Desktop\\react-basic-app\\lab08-exercise\\src\\reportWebVitals.js":"1","C:\\Users\\Vision\\Desktop\\react-basic-app\\lab08-exercise\\src\\App.js":"2","C:\\Users\\Vision\\Desktop\\react-basic-app\\lab08-exercise\\src\\ElementsList\\ElementsList.js":"3","C:\\Users\\Vision\\Desktop\\react-basic-app\\lab08-exercise\\src\\ElementsList\\Element\\Element.js":"4"},{"size":362,"mtime":1606769497966,"results":"5","hashOfConfig":"6"},{"size":221,"mtime":1608146193488,"results":"7","hashOfConfig":"6"},{"size":682,"mtime":1608319627777,"results":"8","hashOfConfig":"6"},{"size":1923,"mtime":1608323602890,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1966mm2",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"C:\\Users\\Vision\\Desktop\\react-basic-app\\lab08-exercise\\src\\reportWebVitals.js",[],["21","22"],"C:\\Users\\Vision\\Desktop\\react-basic-app\\lab08-exercise\\src\\App.js",[],["23","24"],"C:\\Users\\Vision\\Desktop\\react-basic-app\\lab08-exercise\\src\\ElementsList\\ElementsList.js",[],"C:\\Users\\Vision\\Desktop\\react-basic-app\\lab08-exercise\\src\\ElementsList\\Element\\Element.js",["25","26"],"import React, {useState} from \"react\";\r\nimport './Element.scss';\r\n\r\n//{threadData} object which contains threads data\r\n\r\nfunction Element({threadData}) {\r\n\r\n    // Thread message length\r\n    const [ showMessages, setShowMessages] = useState(0);\r\n\r\n    // Shows messages number and their rating\r\n    const messages = (score) => {\r\n        if(showMessages !== threadData.length && threadData.length > 1){\r\n            return ( <span className={\"Message \", (score >= 6 ? 'HighRatingMessage' : 'LowRatingMessage')} >{threadData.length} messages</span>);\r\n        }\r\n    }\r\n\r\n    // Shows element rating depend of the score\r\n    const subjectRating = (score, subject) => {\r\n        return (<h5 className={(score >= 6 ? 'HighRatingSubject' : 'LowRatingSubject')}>{subject}</h5>);\r\n    }\r\n    return (\r\n        <div>\r\n            {threadData.map((threadElement,index) => {\r\n                if(showMessages !== 0 || index === 0 ){\r\n                    return(\r\n                        <div className=\"Element\" key={index} onClick={()=>setShowMessages(threadData.length)}>\r\n                            {messages(threadElement.score)}\r\n                            <div className=\"Description\">\r\n                                {subjectRating(threadElement.score, threadElement.subject)}\r\n                                <p>{threadElement.question}</p>\r\n                                <span>{threadElement.text}</span>\r\n                            </div>\r\n                            <div className=\"Data\">   \r\n                                <div className=\"DataInfo\">\r\n                                    <p>{threadElement.team}</p>\r\n                                    <span>{threadElement.created_at}</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            }) }\r\n        </div>\r\n    );\r\n}\r\nexport default Element;\r\n",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"27","replacedBy":"31"},{"ruleId":"29","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":14,"column":49,"nodeType":"35","messageId":"36","endLine":14,"endColumn":50},{"ruleId":"37","severity":1,"message":"38","line":24,"column":51,"nodeType":"39","messageId":"40","endLine":24,"endColumn":53},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],["41"],["42"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]